%***********************************************************%
%                  >> IN THE NAME OF GOD <<                 %
% Pushover Analysis of Nonlinear Springs with Force Control %
%-----------------------------------------------------------%
%     This program is written by Salar Delavar Ghashghaei   %  
%            E-mail:salar.d.ghashghaei@gmail.com            %
%             Publication Date : 25 - May - 2017            %
%***********************************************************%
clear all;close all;clc
% Define Parameters in Free Unit
P1 = 0; % External force [DOF(1)]
P2 = 0; % External force [DOF(2)]
D2 = 0.1;  % Initial Incremental Displacement [DOF (2)]
itermax = 500;% maximum number of iterations
tolerance = 1e-12; % specified tolerance for convergence
u = 0;% initial guess value
%%% monitor cpu time
starttime = cputime;
%% Spring Properties
%      Strain Stress
DATA = [.0012 200 .005 300 .01 320 .05 350 10;
        .0013 210 .006 310 .011 330 .05 360 10;
        .0014 220 .007 320 .012 340 .05 370 10;
        .0015 230 .008 330 .013 350 .05 380 10;
        .0016 240 .009 340 .014 360 .05 390 10;
        .0017 250 .01 350 .015 370 .05 400 10;
        .0018 260 .011 360 .016 380 .05 410 20;
        .0019 270 .012 370 .017 390 .05 420 20];
L1 = 1000; % Length of spring 1
L2 = 1000; % Length of spring 2
L3 = 2000; % Length of spring 3
D2max=L1*max(DATA(:,7)); % Maximum displacement [DOF(2)]     
for i=1:8
A(i)= DATA(i,9);
E1(i)=(DATA(i,2)-0)/(DATA(i,1)-0);
E2(i)=(DATA(i,4)-DATA(i,2))/(DATA(i,3)-DATA(i,1));
E3(i)=(DATA(i,6)-DATA(i,4))/(DATA(i,5)-DATA(i,3));
E4(i)=(DATA(i,8)-DATA(i,6))/(DATA(i,7)-DATA(i,5));
end
m = D2max/D2 +1; % Number of steps increment
%% Nonlinear Springs Analysis
disp('#################################################');
disp('#    Pushover Analysis of Nonlinear Springs     #');
disp('#################################################');
% Gradually increase the applied load
for i=1:m
    up=D2*i;
    es1 = u/L1;
    es2 = (up-u)/L2;
    es3 = up/L3;
        for (j=1:3)  
        if and(abs(es1) >= 0,abs(es1) <= DATA(j,1))
            K(j) = (E1(j)*A(j))/L1;
        elseif and(abs(es1) > DATA(j,1),abs(es1)<= DATA(j,3))
            K(j) = ((DATA(j,2)+E2(j)*(abs(es1)-DATA(j,1)))/abs(es1))*A(j)/L1;
        elseif and(abs(es1) > DATA(j,3),abs(es1)<= DATA(j,5))
            K(j) = ((DATA(j,4)+E3(j)*(abs(es1)-DATA(j,3)))/abs(es1))*A(j)/L1;
        elseif and(abs(es1) > DATA(j,5),abs(es1) <= DATA(j,7))
            K(j) = ((DATA(j,6)+E4(j)*(abs(es1)-DATA(j,5)))/abs(es1))*A(j)/L1;
        else 
            K(j) = 0;  
        end
        end
        for (j=4:6)
        if and(abs(es2) >= 0,abs(es2) <= DATA(j,1))
            K(j) = (E1(j)*A(j))/L2;
        elseif and(abs(es2) > DATA(j,1),abs(es2)<= DATA(j,3))
            K(j) = ((DATA(j,2)+E2(j)*(abs(es2)-DATA(j,1)))/abs(es2))*A(j)/L2;
        elseif and(abs(es2) > DATA(j,3),abs(es2)<= DATA(j,5))
            K(j) = ((DATA(j,4)+E3(j)*(abs(es2)-DATA(j,3)))/abs(es2))*A(j)/L2;
        elseif and(abs(es2) > DATA(j,5),abs(es2) <= DATA(j,7))
            K(j) = ((DATA(j,6)+E4(j)*(abs(es2)-DATA(j,5)))/abs(es2))*A(j)/L2;
        else 
            K(j) = 0;  
        end
        end
        for (j=7:8)
        if and(abs(es3) >= 0,abs(es3) <= DATA(j,1))
            K(j) = (E1(j)*A(j))/L3;
        elseif and(abs(es3) > DATA(j,1),abs(es3)<= DATA(j,3))
            K(j) = ((DATA(j,2)+E2(j)*(abs(es3)-DATA(j,1)))/abs(es3))*A(j)/L3;
        elseif and(abs(es3) > DATA(j,3),abs(es3)<= DATA(j,5))
            K(j) = ((DATA(j,4)+E3(j)*(abs(es3)-DATA(j,3)))/abs(es3))*A(j)/L3;
        elseif and(abs(es3) > DATA(j,5),abs(es3) <= DATA(j,7))
            K(j) = ((DATA(j,6)+E4(j)*(abs(es3)-DATA(j,5)))/abs(es3))*A(j)/L3;
        else 
            K(j) = 0;  
        end
        end
        k11=K(1)+K(2)+K(3)+K(4)+K(5)+K(6);
        k12=-K(2)-K(4)-K(6);
        k22=K(2)+K(4)+K(6)+K(7)+K(8);
        Kp = [k11 k12;
              k12 k22];
        Fii = Kp(:,2)*up;
        Kini = k11;
        Fi = [P1;P2];F=Fi-Fii;F=[F(1,1)];
        it = 0; % initialize iteration count
        residual = 100; % initialize residual
        while (residual > tolerance)
        es1 = u/L1;
        es2 = (up-u)/L2;
        es3 = up/L3;
        for (j=1:3)  
        if and(abs(es1) >= 0,abs(es1) <= DATA(j,1))
            Kt(j) = (E1(j)*A(j))/L1;
        elseif and(abs(es1) > DATA(j,1),abs(es1)<= DATA(j,3))
            Kt(j) = ((DATA(j,2)+E2(j)*(abs(es1)-DATA(j,1)))/abs(es1))*A(j)/L1;
        elseif and(abs(es1) > DATA(j,3),abs(es1)<= DATA(j,5))
            Kt(j) = ((DATA(j,4)+E3(j)*(abs(es1)-DATA(j,3)))/abs(es1))*A(j)/L1;
        elseif and(abs(es1) > DATA(j,5),abs(es1) <= DATA(j,7))
            Kt(j) = ((DATA(j,6)+E4(j)*(abs(es1)-DATA(j,5)))/abs(es1))*A(j)/L1;
        else 
            Kt(j) = 0;  
        end
        end
        for (j=4:6)
        if and(abs(es2) >= 0,abs(es2) <= DATA(j,1))
            Kt(j) = (E1(j)*A(j))/L2;
        elseif and(abs(es2) > DATA(j,1),abs(es2)<= DATA(j,3))
            Kt(j) = ((DATA(j,2)+E2(j)*(abs(es2)-DATA(j,1)))/abs(es2))*A(j)/L2;
        elseif and(abs(es2) > DATA(j,3),abs(es2)<= DATA(j,5))
            Kt(j) = ((DATA(j,4)+E3(j)*(abs(es2)-DATA(j,3)))/abs(es2))*A(j)/L2;
        elseif and(abs(es2) > DATA(j,5),abs(es2) <= DATA(j,7))
            Kt(j) = ((DATA(j,6)+E4(j)*(abs(es2)-DATA(j,5)))/abs(es2))*A(j)/L2;
        else 
            Kt(j) = 0;  
        end
        end
        for (j=7:8)
        if and(abs(es3) >= 0,abs(es3) <= DATA(j,1))
            Kt(j) = (E1(j)*A(j))/L3;
        elseif and(abs(es3) > DATA(j,1),abs(es3)<= DATA(j,3))
            Kt(j) = ((DATA(j,2)+E2(j)*(abs(es3)-DATA(j,1)))/abs(es3))*A(j)/L3;
        elseif and(abs(es3) > DATA(j,3),abs(es3)<= DATA(j,5))
            Kt(j) = ((DATA(j,4)+E3(j)*(abs(es3)-DATA(j,3)))/abs(es3))*A(j)/L3;
        elseif and(abs(es3) > DATA(j,5),abs(es3) <= DATA(j,7))
            Kt(j) = ((DATA(j,6)+E4(j)*(abs(es3)-DATA(j,5)))/abs(es3))*A(j)/L3;
        else 
            Kt(j) = 0;  
        end
        end
        ko11=Kt(1)+Kt(2)+Kt(3)+Kt(4)+Kt(5)+Kt(6);
        ko12=-Kt(2)-Kt(4)-Kt(6);
        ko22=Kt(2)+Kt(4)+Kt(6)+Kt(7)+Kt(8);
        Ko = ko11;
        ff=Ko*u-F;
        %calculate du
        du = Kini^-1 *(-ff);
        residual = abs(du); % evaluate residual
        u = u+du; % update u
        it = it + 1; % increment iteration count
        if it == itermax
          fprintf('(-)For increment %1.0f trail iteration reached to Ultimate %1.0f\n',i,it)
             disp('    ## The solution for this step is not converged ##') 
            break
        end
        
        end
              % iteration control
              if it < itermax
              fprintf('(+)Increment %1.0f : It is converged in %1.0f iterations\n',i,it)
              end
        % Internal element force           
        for (k=1:3)
        f(k) = K(k)*u;
        end
        for (k=4:6)
        f(k) = K(k)*(up-u);
        end
        for (k=7:8)
        f(k) = K(k)*up;
        end
    % Force and Dispalcement for each increment
    F1i(i) = f(1)+f(2)+f(3)+f(7)+f(8);
    U1(i) = up;
    DU1(i)=residual;I1(i)=i;IT1(i)=it;
    if abs(up) >= D2max;disp('  ## Displacement reached to ultimate displacement ##');break;end
end
D1=[0;U1'];F1=[0;F1i'];
%% Linear Springs Analysis
disp('#################################################');
disp('#      Pushover Analysis of Linear Springs      #');
disp('#################################################');
f=zeros(8,1);
u=0;
% Gradually increase the applied load
for i=1:i
        up=D2*i;
        for (j=1:3)
            K(j) = (E1(j)*A(j))/L1;
        end
        for (j=4:6)
            K(j) = (E1(j)*A(j))/L2;
        end
        for (j=7:8)
            K(j) = (E1(j)*A(j))/L3;
        end
        k11=K(1)+K(2)+K(3)+K(4)+K(5)+K(6);
        k12=-K(2)-K(4)-K(6);
        k22=K(2)+K(4)+K(6)+K(7)+K(8);
          Kp = [k11 k12;
                k12 k22];
        Fii = Kp(:,2)*up;
        Kini = k11;
        Fi = [P1;P2];F=Fi-Fii;F=[F(1,1)];
        it = 0; % initialize iteration count
        residual = 100; % initialize residual
        while (residual > tolerance)
        for (j=1:3)
            Kt(j) = (E1(j)*A(j))/L1;
        end
        for (j=4:6)
            Kt(j) = (E1(j)*A(j))/L2;
        end
        for (j=7:8)
            Kt(j) = (E1(j)*A(j))/L3;
        end
        ko11=Kt(1)+Kt(2)+Kt(3)+Kt(4)+Kt(5)+Kt(6);
        ko12=-Kt(2)-Kt(4)-Kt(6);
        ko22=Kt(2)+Kt(4)+Kt(6)+Kt(7)+Kt(8);
        Ko = ko11;
        ff=Ko*u-F;
        %calculate du
        du = Kini^-1 *(-ff);
        u = u+du; % update u
        residual = max(abs(du)); % evaluate residual
        it = it + 1; % increment iteration count
        if it == itermax
          fprintf('(-)For increment %1.0f trail iteration reached to Ultimate %1.0f\n',i,it)
             disp('    ## The solution for this step is not converged ##') 
            break
        end
        end
              % iteration control
              if it < itermax
              fprintf('(+)Increment %1.0f : It is converged in %1.0f iterations\n',i,it)
              end
        % Internal element force           
        for (k=1:3)
        f(k) = K(k)*u;
        end
        for (k=4:6)
        f(k) = K(k)*(up-u);
        end
        for (k=7:8)
        f(k) = K(k)*up;
        end
% Force and Dispalcement for each increment
    F2i(i) = f(1)+f(2)+f(3)+f(7)+f(8);
    U2(i) = up;
    DU2(i)=residual;I2(i)=i;IT2(i)=it;
end
D2=[0;U2'];F2=[0;F2i'];
strain1 = [0 DATA(1,1) DATA(1,3) DATA(1,5) DATA(1,7)];
stress1= [0 DATA(1,2) DATA(1,4) DATA(1,6) DATA(1,8)];
strain2 = [0 DATA(2,1) DATA(2,3) DATA(2,5) DATA(2,7)];
stress2= [0 DATA(2,2) DATA(2,4) DATA(2,6) DATA(2,8)];
strain3 = [0 DATA(3,1) DATA(3,3) DATA(3,5) DATA(3,7)];
stress3= [0 DATA(3,2) DATA(3,4) DATA(3,6) DATA(3,8)];
strain4 = [0 DATA(4,1) DATA(4,3) DATA(4,5) DATA(4,7)];
stress4= [0 DATA(4,2) DATA(4,4) DATA(4,6) DATA(4,8)];
strain5 = [0 DATA(5,1) DATA(5,3) DATA(5,5) DATA(5,7)];
stress5= [0 DATA(5,2) DATA(5,4) DATA(5,6) DATA(5,8)];
strain6 = [0 DATA(6,1) DATA(6,3) DATA(6,5) DATA(6,7)];
stress6= [0 DATA(6,2) DATA(6,4) DATA(6,6) DATA(6,8)];
strain7 = [0 DATA(7,1) DATA(7,3) DATA(7,5) DATA(7,7)];
stress7= [0 DATA(7,2) DATA(7,4) DATA(7,6) DATA(7,8)];
strain8 = [0 DATA(8,1) DATA(8,3) DATA(8,5) DATA(8,7)];
stress8= [0 DATA(8,2) DATA(8,4) DATA(8,6) DATA(8,8)];
%% ABAQUS
F3 =-[-0
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-142.105
-212.641
-318.962
-461.067
-603.172
-745.277
-887.382
-1029.49
-1171.59
-1313.7
-1455.8
-1597.91
-1740.01
-1882.12
-2024.22
-2166.33
-2308.43
-2450.54
-2592.64
-2734.75
-2876.85
-3018.96
-3161.06
-3303.17
-3445.27
-3587.38
-3729.48
-3871.59
-4013.69
-4155.8
-4297.9
-4440.01
-4582.11
-4724.22
-4866.32
-5008.43
-5150.53
-5292.64
-5401.92
-5409.8
-5417.67
-5425.54
-5433.41
-5441.28
-5449.15
-5457.03
-5464.9
-5472.77
-5480.64
-5488.51
-5496.39
-5504.26
-5512.13
-5520
-5527.87
-5535.74
-5543.62
-5551.49
-5559.36
-5567.23
-5575.1
-5582.97
-5590.85
-5598.72
-5606.59
-5614.46
-5622.33
-5630.2
-5638.08
-5645.95
-5653.82
-5661.69
-5669.56
-5677.43
-5685.31
-5693.18
-5701.05
-5708.92
-5716.79
-5724.67
-5732.54
-5740.41
-5748.28
-5756.15
-5764.02
-5771.9
-5779.77
-5787.64
-5795.51
-5803.38
-5811.25
-5819.13
-5827
-5834.87
-5842.74
-5850.61
-5858.48
-5866.36
-5874.23
-5882.1
-5889.97
-5897.84
-5905.71
-5913.59
-5921.46
-5929.33
-5937.2
-5945.07
-5952.94
-5960.82
-5968.69
-5976.56
-5984.43
-5992.3
-6000.18
-6008.05
-6015.92
-6023.79
-6031.66
-6039.53
-6047.41
-6055.28
-6063.15
-6071.02
-6078.89
-6086.76
-6094.64
-6102.51
-6110.38
-6118.25
-6126.12
-6133.99
-6141.87
-6149.74
-6157.61
-6165.48
-6173.35
-6181.22
-6189.1
-6196.97
-6204.84
-6212.71
-6220.58
-6228.46
-6236.33
-6244.2
-6252.07
-6259.94
-6267.81
-6275.69
-6283.56
-6291.43
-6299.3
-6307.17
-6315.04
-6322.92
-6330.79
-6338.66
-6346.53
-6354.4
-6362.27
-6370.15
-6378.02
-6385.89
-6393.76
-6401.63
-6409.5
-6417.38
-6425.25
-6433.12
-6440.99
-6448.86
-6456.73
-6464.61
-6472.48
-6480.35
-6488.22
-6496.09
-6503.97
-6511.84
-6519.71
-6527.58
-6535.45
-6543.32
-6551.2
-6559.07
-6566.94
-6574.81
-6582.68
-6590.55
-6598.43
-6606.3
-6614.17
-6622.04
-6629.91
-6637.78
-6645.66
-6653.53
-6661.4
-6669.27
-6677.14
-6685.01
-6692.89
-6700.76
-6708.63
-6716.5
-6724.37
-6732.25
-6740.12
-6747.99
-6755.86
-6763.73
-6771.6
-6779.48
-6787.35
-6795.22
-6803.09
-6810.96
-6818.83
-6826.71
-6834.58
-6842.45
-6850.32
-6858.19
-6866.06
-6873.94
-6881.81
-6889.68
-6897.55
-6905.42
-6913.29
-6921.17
-6929.04
-6936.91
-6944.78
-6952.65
-6960.52
-6968.4
-6976.27
-6984.14
-6992.01
-6999.88
-7007.76
-7015.63
-7023.5
-7031.37
-7039.24
-7047.11
-7054.99
-7062.86
-7070.73
-7078.6
-7086.47
-7094.34
-7102.22
-7110.09
-7117.96
-7125.83
-7133.7
-7141.57
-7149.45
-7157.32
-7165.19
-7173.06
-7180.93
-7188.8
-7196.68
-7204.55
-7212.42
-7220.29
-7228.16
-7236.04
-7243.91
-7251.78
-7259.65
-7267.52
-7275.39
-7283.27
-7291.14
-7299.01
-7306.88
-7314.75
-7322.62
-7330.5
-7338.37
-7346.24
-7354.11
-7361.98
-7369.85
-7377.73
-7385.6
-7393.47
-7400.66
-7404.55
-7408.44
-7412.33
-7416.22
-7420.12
-7424.01
-7427.9
-7431.79
-7435.68
-7439.57
-7443.46
-7447.35
-7451.24
-7455.13
-7459.02
-7462.91
-7466.8
-7470.69
-7474.58
-7478.47
-7482.36
-7486.25
-7490.14
-7494.03
-7497.93
-7501.82
-7505.71
-7509.6
-7513.49
-7517.38
-7521.27
-7525.16
-7529.05
-7532.94
-7536.83
-7540.72
-7544.61
-7548.5
-7552.39
-7556.28
-7560.17
-7564.06
-7567.95
-7571.84
-7575.73
-7579.63
-7583.52
-7587.41
-7591.3
-7595.19
-7599.08
-7602.97
-7606.86
-7610.75
-7614.64
-7618.53
-7622.42
-7626.31
-7630.2
-7634.09
-7637.98
-7641.87
-7645.76
-7649.65
-7653.54
-7657.44
-7661.33
-7665.22
-7669.11
-7673
-7676.89
-7680.78
-7684.67
-7688.56
-7692.45
-7696.34
-7700.23
-7704.12
-7708.01
-7711.9
-7715.79
-7719.68
-7723.57
-7727.46
-7731.35
-7735.25
-7739.14
-7743.03
-7746.92
-7750.81
-7754.7
-7758.59
-7762.48
-7766.37
-7770.26
-7774.15
-7778.04
-7781.93
-7785.82
-7789.71
-7793.6
-7797.49
-7800.32
-7801.22
-7802.13
-7803.03
-7803.93
-7804.84
-7805.74
-7806.64
-7807.55
-7808.45
-7809.35
-7810.26
-7811.16
-7812.06
-7812.97
-7813.87
-7814.77
-7815.68
-7816.58
-7817.48
-7818.39
-7819.29
-7820.19
-7821.1
-7822
-7822.9
-7823.81
-7824.71
-7825.61
-7826.52
-7827.42
-7828.32
-7829.23
-7830.13
-7831.03
-7831.94
-7832.84
-7833.74
-7834.65
-7835.55
-7836.45
-7837.36
-7838.26
-7839.16
-7840.07
-7840.97
-7841.87
-7842.78
-7843.68
-7844.58
-7845.49
-7846.39
-7847.29
-7848.2
-7849.1
-7850
-7850.91
-7851.81
-7852.71
-7853.62
-7854.52
-7855.42
-7856.33
-7857.23
-7858.13
-7859.04
-7859.94
-7860.84
-7861.75
-7862.65
-7863.55
-7864.46
-7865.36
-7866.26
-7867.17
-7868.07
-7868.97
-7869.88
-7870.78
-7871.68
-7872.59
-7873.49
-7874.39
-7875.3
-7876.2
-7877.1
-7878.01
-7878.91
-7879.81
-7880.72
-7881.62
-7882.52
-7883.43
-7884.33
-7885.23
-7886.14
-7887.04
-7887.94
-7888.85
-7889.75
-7890.65
-7891.56
-7892.46
-7893.36
-7894.27
-7894.95];
D3 = [0
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.1
0.149637
0.224455
0.324455
0.424455
0.524455
0.624455
0.724455
0.824455
0.924455
1.02445
1.12445
1.22445
1.32445
1.42445
1.52445
1.62445
1.72445
1.82445
1.92445
2.02445
2.12445
2.22445
2.32445
2.42445
2.52445
2.62445
2.72445
2.82445
2.92445
3.02445
3.12445
3.22445
3.32445
3.42445
3.52445
3.62445
3.72445
3.82445
3.92445
4.02445
4.12445
4.22445
4.32445
4.42445
4.52445
4.62445
4.72445
4.82445
4.92445
5.02445
5.12445
5.22445
5.32445
5.42445
5.52445
5.62445
5.72445
5.82445
5.92445
6.02445
6.12445
6.22445
6.32445
6.42445
6.52445
6.62445
6.72445
6.82445
6.92445
7.02445
7.12445
7.22445
7.32445
7.42445
7.52445
7.62445
7.72445
7.82445
7.92445
8.02446
8.12445
8.22445
8.32446
8.42445
8.52446
8.62445
8.72445
8.82446
8.92445
9.02446
9.12445
9.22445
9.32446
9.42445
9.52446
9.62445
9.72445
9.82446
9.92445
10.0245
10.1245
10.2245
10.3245
10.4245
10.5245
10.6245
10.7245
10.8245
10.9245
11.0245
11.1245
11.2245
11.3245
11.4245
11.5245
11.6245
11.7245
11.8245
11.9245
12.0245
12.1245
12.2245
12.3245
12.4245
12.5245
12.6245
12.7245
12.8245
12.9245
13.0245
13.1245
13.2245
13.3245
13.4245
13.5245
13.6245
13.7245
13.8245
13.9245
14.0245
14.1245
14.2245
14.3245
14.4245
14.5245
14.6245
14.7245
14.8245
14.9245
15.0245
15.1245
15.2245
15.3245
15.4245
15.5245
15.6245
15.7245
15.8245
15.9245
16.0245
16.1245
16.2245
16.3245
16.4245
16.5245
16.6245
16.7245
16.8245
16.9245
17.0245
17.1245
17.2245
17.3245
17.4245
17.5245
17.6245
17.7245
17.8245
17.9245
18.0245
18.1245
18.2245
18.3245
18.4245
18.5245
18.6245
18.7245
18.8245
18.9245
19.0245
19.1245
19.2245
19.3245
19.4245
19.5245
19.6245
19.7245
19.8245
19.9245
20.0245
20.1245
20.2245
20.3245
20.4245
20.5245
20.6245
20.7245
20.8245
20.9245
21.0245
21.1245
21.2245
21.3245
21.4245
21.5245
21.6245
21.7245
21.8245
21.9245
22.0245
22.1245
22.2245
22.3245
22.4245
22.5245
22.6245
22.7245
22.8245
22.9245
23.0245
23.1245
23.2245
23.3245
23.4245
23.5245
23.6245
23.7245
23.8245
23.9245
24.0245
24.1245
24.2245
24.3245
24.4245
24.5245
24.6245
24.7245
24.8245
24.9245
25.0245
25.1245
25.2245
25.3245
25.4245
25.5245
25.6245
25.7245
25.8245
25.9245
26.0245
26.1245
26.2245
26.3245
26.4245
26.5245
26.6245
26.7245
26.8245
26.9245
27.0245
27.1245
27.2245
27.3245
27.4245
27.5245
27.6245
27.7245
27.8245
27.9245
28.0245
28.1245
28.2245
28.3245
28.4245
28.5245
28.6245
28.7245
28.8245
28.9245
29.0245
29.1245
29.2245
29.3245
29.4245
29.5245
29.6245
29.7245
29.8245
29.9245
30.0245
30.1245
30.2245
30.3245
30.4245
30.5245
30.6245
30.7245
30.8245
30.9245
31.0245
31.1245
31.2245
31.3245
31.4245
31.5245
31.6245
31.7245
31.8245
31.9245
32.0245
32.1245
32.2245
32.3245
32.4245
32.5245
32.6245
32.7245
32.8245
32.9245
33.0245
33.1245
33.2245
33.3245
33.4245
33.5245
33.6245
33.7245
33.8245
33.9245
34.0245
34.1245
34.2245
34.3245
34.4245
34.5245
34.6245
34.7245
34.8245
34.9245
35.0245
35.1245
35.2245
35.3245
35.4245
35.5245
35.6245
35.7245
35.8245
35.9245
36.0245
36.1245
36.2245
36.3245
36.4245
36.5245
36.6245
36.7245
36.8245
36.9245
37.0245
37.1245
37.2245
37.3245
37.4245
37.5245
37.6245
37.7245
37.8245
37.9245
38.0245
38.1245
38.2245
38.3245
38.4245
38.5245
38.6245
38.7245
38.8245
38.9245
39.0245
39.1245
39.2245
39.3245
39.4245
39.5245
39.6245
39.7245
39.8245
39.9245
40.0245
40.1245
40.2245
40.3245
40.4245
40.5245
40.6245
40.7245
40.8245
40.9245
41.0245
41.1245
41.2245
41.3245
41.4245
41.5245
41.6245
41.7245
41.8245
41.9245
42.0245
42.1245
42.2245
42.3245
42.4245
42.5245
42.6245
42.7245
42.8245
42.9245
43.0245
43.1245
43.2245
43.3245
43.4245
43.5245
43.6245
43.7245
43.8245
43.9245
44.0245
44.1245
44.2245
44.3245
44.4245
44.5245
44.6245
44.7245
44.8245
44.9245
45.0245
45.1245
45.2245
45.3245
45.4245
45.5245
45.6245
45.7245
45.8245
45.9245
46.0245
46.1245
46.2245
46.3245
46.4245
46.5245
46.6245
46.7245
46.8245
46.9245
47.0245
47.1245
47.2245
47.3245
47.4245
47.5245
47.6245
47.7245
47.8245
47.9245
48.0245
48.1245
48.2245
48.3245
48.4245
48.5245
48.6245
48.7245
48.8245
48.9245
49.0245
49.1245
49.2245
49.3245
49.4245
49.5245
49.6245
49.7245
49.8245
49.9245
50];
%% SAP2000
D4=[0
2.5
5
7.5
10
12.5
15
17.5
20
22.5
25
27.5
30
32.5
35
37.5
40
42.5
45
47.5
50];
F4=[0
13333.33
26666.66
39999.99
53333.32
66666.65
79999.99
93333.32
106666.65
119999.98
133333.31
146666.64
159999.97
173333.3
186666.63
199999.96
213333.3
226666.63
239999.96
253333.29
266666.62];
%% imaging
figure (1)
IMAGE=imread('PushoverAnalysisNonlinear8SpringsFC2dofStrain.jpg');
image(IMAGE);axis image;axis off;
figure(2)
p1=plot(strain1,stress1,strain2,stress2,strain3,stress3,strain4,stress4,strain5,stress5,strain6,stress6,strain7,stress7,strain8,stress8,'--');grid on;set(p1,'LineWidth',2);
xlabel('Strain');ylabel('Stress');
legend('ele.1','ele.2','ele.3','ele.4','ele.5','ele.6','ele.7','ele.8','Location','NorthEastOutside');
title('Strain-Stress diagram of elements','color','b');
figure(3)
p1=plot(I1,DU1,'black',I2,DU2,'--green');grid on;set(p1,'LineWidth',2);
xlabel('increment');ylabel('Residual');
legend('Nonlinear','Linear','Location','NorthEastOutside');
title('Residual-Increment diagram','color','b');
figure(4)
p1=plot(I1,IT1,'black',I2,IT2,'--green');grid on;set(p1,'LineWidth',2);
xlabel('increment');ylabel('Iteration');
legend('Nonlinear','Linear','Location','NorthEastOutside');
title('Iteration-Increment diagram','color','b');
figure(5)
p1=plot(D1,F1,D3,F3,'--red');grid on;set(p1,'LineWidth',2);
legend('Nonlinear','ABAQUS','Location','NorthEastOutside');
xlabel('Displacement');ylabel('Reaction');
title('Reaction-Displacement Diagram of Pushover Analysis Nonlinear Springs ','color','b');
figure(6)
p1=plot(D1,F1,'black',D2,F2,'--green',D3,F3,'--red',D4,F4,'-.magenta');grid on;set(p1,'LineWidth',2);
legend('Nonlinear','Linear','ABAQUS','SAP2000','Location','NorthEastOutside');
xlabel('Displacement');ylabel('Reaction');
title('Reaction-Displacement Diagram of Pushover Analysis Linear and Nonlinear Springs ','color','b');

